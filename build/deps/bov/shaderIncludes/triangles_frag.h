static GLchar triangles_frag[]={"/*************************************************************************\n"
"	* BOV 0.1\n"
"	* A wrapper around OpenGL and GLFW (www.glfw.org) to draw simple 2D\n"
"	* graphics.\n"
"	*------------------------------------------------------------------------\n"
"	* Copyright (c) 2019-2020 C\n"
"lestin Marot <marotcelestin@gmail.com>\n"
"	*\n"
"	* This software is provided 'as-is', without any express or implied\n"
"	* warranty. In no event will the authors be held liable for any damages\n"
"	* arising from the use of this software.\n"
"	*\n"
"	* Permission is granted to anyone to use this software for any purpose,\n"
"	* including commercial applications, and to alter it and redistribute it\n"
"	* freely, subject to the following restrictions:\n"
"	*\n"
"	* 1. The origin of this software must not be misrepresented; you must not\n"
"	*    claim that you wrote the original software. If you use this software\n"
"	*    in a product, an acknowledgment in the product documentation would\n"
"	*    be appreciated but is not required.\n"
"	*\n"
"	* 2. Altered source versions must be plainly marked as such, and must not\n"
"	*    be misrepresented as being the original software.\n"
"	*\n"
"	* 3. This notice may not be removed or altered from any source\n"
"	*    distribution.\n"
"	*\n"
"	*************************************************************************/\n"
"\n"
"#version 150 core\n"
"\n"
"// float colormap_red(float x) {\n"
"// 	if (x < 0.4128910005092621) {\n"
"// 		return (-6.30796693758704E+02 * x + 6.59139629181867E+02) * x + 8.16592339699109E+01;\n"
"// 	} else if (x < 0.5004365747118258) {\n"
"// 		return -1.99292307692284E+01 * x + 2.54503076923075E+02;\n"
"// 	} else if (x < 0.6000321805477142) {\n"
"// 		return -4.46903540903651E+02 * x + 4.68176638176691E+02;\n"
"// 	} else {\n"
"// 		return ((2.43537534073204E+03 * x - 5.03831150657605E+03) * x + 2.73595321475367E+03) * x - 1.53778856560153E+02;\n"
"// 	}\n"
"// }\n"
"\n"
"// float colormap_green(float x) {\n"
"// 	if (x < 0.3067105114459991) {\n"
"// 		return (((((-1.43558931121826E+06 * x + 1.21789289489746E+06) * x - 3.88754308517456E+05) * x + 5.87745165729522E+04) * x - 3.61237992835044E+03) * x + 4.00139210969209E+02) * x + 4.80612502318691E+01;\n"
"// 	} else if (x < 0.4045854562297116) {\n"
"// 		return 3.64978461538455E+02 * x + 8.50984615384636E+01;\n"
"// 	} else if (x < 0.5035906732082367) {\n"
"// 		return 1.25827692307720E+02 * x + 1.81855384615367E+02;\n"
"// 	} else {\n"
"// 		return ((((-2.83948052403926E+04 * x + 1.08768529946603E+05) * x - 1.62569302478295E+05) * x + 1.17919256227845E+05) * x - 4.16776268978779E+04) * x + 6.01529271177582E+03;\n"
"// 	}\n"
"// }\n"
"\n"
"// float colormap_blue(float x) {\n"
"// 	if (x < 0.1012683545126085) {\n"
"// 		return 5.85993431855501E+01 * x + 4.56403940886700E+00;\n"
"// 	} else if (x < 0.2050940692424774) {\n"
"// 		return 3.51072173913048E+02 * x - 2.50542028985514E+01;\n"
"// 	} else if (x < 0.5022056996822357) {\n"
"// 		return (-7.65121475963620E+02 * x + 1.20827362856208E+03) * x - 1.68677387505814E+02;\n"
"// 	} else if (x < 0.5970333516597748) {\n"
"// 		return -1.62299487179500E+02 * x + 3.26660512820525E+02;\n"
"// 	} else {\n"
"// 		return ((1.27993125066091E+03 * x - 3.19799978871341E+03) * x + 2.16242391471484E+03) * x - 1.93738146367890E+02;\n"
"// 	}\n"
"// }\n"
"\n"
"// vec4 colormap_idl_cb_brbg(float x) {\n"
"// 	float r = clamp(colormap_red(x) / 255.0, 0.0, 1.0);\n"
"// 	float g = clamp(colormap_green(x) / 255.0, 0.0, 1.0);\n"
"// 	float b = clamp(colormap_blue(x) / 255.0, 0.0, 1.0);\n"
"// 	return vec4(r, g, b, 1.0);\n"
"// }\n"
"\n"
"float colormap_red(float x) {\n"
"    if (x < 0.7) {\n"
"        return 4.0 * x - 1.5;\n"
"    } else {\n"
"        return -4.0 * x + 4.5;\n"
"    }\n"
"}\n"
"\n"
"float colormap_green(float x) {\n"
"    if (x < 0.5) {\n"
"        return 4.0 * x - 0.5;\n"
"    } else {\n"
"        return -4.0 * x + 3.5;\n"
"    }\n"
"}\n"
"\n"
"float colormap_blue(float x) {\n"
"    if (x < 0.3) {\n"
"       return 4.0 * x + 0.5;\n"
"    } else {\n"
"       return -4.0 * x + 2.5;\n"
"    }\n"
"}\n"
"\n"
"vec4 colormap_matlab_jet(float x) {\n"
"    float r = clamp(colormap_red(x), 0.0, 1.0);\n"
"    float g = clamp(colormap_green(x), 0.0, 1.0);\n"
"    float b = clamp(colormap_blue(x), 0.0, 1.0);\n"
"    return vec4(r, g, b, 1.0);\n"
"}\n"
"\n"
"layout (std140) uniform objectBlock\n"
"{\n"
"	vec4 fillColor;\n"
"	vec4 outlineColor;\n"
"	vec2 localPos;\n"
"	vec2 localScale;\n"
"	float width;\n"
"	float marker;\n"
"	float outlineWidth;\n"
"	// float rotation;\n"
"	int space_type; // 0: normal sizes, 1: unzoomable, 2: unmodifable pixel size\n"
"	int colormap; // 0: uniform fill color else: matlab_jet colormap\n"
"};\n"
"\n"
"in vec3 bary;\n"
"flat in float pixelSize;\n"
"in float value;\n"
"\n"
"out vec4 outColor;\n"
"\n"
"void main()\n"
"{\n"
"	vec2 sdf = vec2(0.0, 0.0 - outlineWidth + step(outlineWidth, 0.0))\n"
"	           + min(bary.x, min(bary.y, bary.z));\n"
"	vec2 alpha = smoothstep(-pixelSize, pixelSize, sdf);\n"
"  vec4 fcolor;\n"
"  if (colormap == 0) {\n"
"    fcolor = fillColor;\n"
"  }\n"
"  else {\n"
"    // fcolor = colormap_idl_cb_brbg(value);\n"
"		fcolor = colormap_matlab_jet(value);\n"
"  }\n"
"	outColor = mix(outlineColor, fcolor, alpha.y);\n"
"	outColor.a *= alpha.x;\n"
"}\n"
};
